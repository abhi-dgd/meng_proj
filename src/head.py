# Import Python libraries
import time
import pprint

# Import installed libraries
import sys
import pandas as pd
import numpy as np
np.set_printoptions(threshold=sys.maxsize)

# Import custom modules
from colaborativefilter import cf_recommender
from incompletesearch import keyword_search, fake_wait

# Read data from
#path_to_books = r'/Users/abhidgd/Downloads/'
#file_name = 'Books.csv'
dir_path = 'data/'

# Filter data
rows = 100
columns = 5

df_raw_books = pd.read_csv('data/' + 'Books.csv', low_memory=False,
                                dtype={ 
                                        'ISBN': 'str',
                                        'Book-Title': 'str',
                                        'Book-Author': 'str',
                                        'Year-Of-Publication': 'str',
                                        'Publisher': 'str',
                                        'Image-URL-S': 'str',
                                        'Image-URL-M': 'str',
                                        'Image-URL-L': 'str',
                                       })
    
df_raw_ratings = pd.read_csv('data/' + 'Ratings.csv', low_memory=False,
                                dtype={ 
                                    'User-ID': 'str',
                                    'ISBN': 'str',
                                    'Book-Rating': 'str',
                                    })

print('Data shapes:')
print('-'*72)
print(f'Books shape: {df_raw_books.shape}')
print(f'Ratings shape: {df_raw_ratings.shape}')

# Execution
if __name__ == '__main__':
        
    df_raw = df_raw_books.merge(df_raw_ratings, on = 'ISBN')
    print(f'Book-ratings merged shape: {df_raw.shape}')
    print('-'*72)
    df_copy = df_raw.copy()
    df_filtered = df_copy.iloc[:rows,:columns]
    df_book_titles = df_filtered['Book-Title']
    print(f'Book available to search from: {df_book_titles.shape}')
    print('-'*72)
    for book in df_book_titles:
        print(book)
    print('-'*72)
    print()
    print('*'*72)
    from_user = input('Search from book titles: ')
       
    if (from_user != ""):
        fuzzy_output = keyword_search(key = from_user, choices = df_book_titles,)
        input_to_recommender = fuzzy_output[0][0]
        fake_wait(3)
        recommendation = cf_recommender(df = df_copy, search = input_to_recommender,)
        print('-'*72)
        print(f'Recommendations generated by the ' + 
                'Colaborative filtering recommendation system: {recommendation}')
        print('-'*72)
        print()
    else:
        print('Input to search cannot be empty.')